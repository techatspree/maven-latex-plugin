<document xmlns="http://maven.apache.org/changes/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/changes/1.0.0 http://maven.apache.org/xsd/changes-1.0.0.xsd">

<!-- https://maven.apache.org/plugins/maven-changes-plugin/changes.html -->
    <!-- action types: 
	 add: added functionality to the project.
	 fix: bug fix for the project.
	 update: updated some part of the project.
	 remove: removed some functionnality from the project. -->
  <properties>
    <title>Latex-Maven-Plugin</title>
    <author email="reissner@simuline.eu">Ernst Reissner</author>
  </properties>
  <body>
    <!-- Release plan: 
	 For 1.8: 
	 - further output formats: xml from latexml, epub. 
	   in manual: flow oriented vs page oriented. 
	   Flow oriented: html, ... epub, ... 
	   Page oriented: pdf, latex (dvi), office (odt, xdoc, ...)
	   Take multipubguide.pdf into account.
	 - Further exporters with config to access them 
	   besides latex2ht also latexml, pandoc 
	   Have a look at texnische komoedie, pdf checked in. 
	 - take pylatex into account: can there be a relation.
	 - take pythontex into account: 
	   maybe according support in separate release 
	   The converter is added already, 
	   but there is no ConverterCategory yet. 
	   Take also cleaning into account. 
	 For 1.7: 
	 - support for pythontex 
	 For 1.6:
	 - make capabilities inspired by latexmk: 
	   If latex is invoked with option -recorder it creates a file .fls
	   containing all the files read during its run. 
	   If this software runs latex, after that it looks for an .fls file 
	   and if found stores an .lmk file 
	   containing hashs for the files mentioned in .fls. 
	   These hashs indicate potential changes. 
	   As a first step we may use modification time. 
	   In the next run, before invoking latex, 
	   this software checks whether the .lmk file is present. 
	   If not, latex is invoked. 
	   If it is present, then it is invoked only 
	   if files is modified, including the source. 
	   We need a mechanism to know whether invoked as a maven plugin, 
	   ant task or standalone. 
	   The latter stores command line file reflecting command line options. 
	   Then also the config, e.g. pom.xml, build.xml or command line file 
	   is taken into account to detect changes. 
	   Hm, no. If something changes in pom, that is no indication. 
	   There must be a file, maybe in ~/.lmk, 
	   reflecting the options of the last run. 
	 For 1.5: 
	 - meta info for this software including own version 
	   git interface 
	 - awareness of version of converters, both expected and actual 
	   Add also according testcases 
	 - this software offered also as a standalone application 
	   and as an api to integrate everywhere. 
	 - also for documentation, meta information 
	   like version but also author email and so on are vital. 
	   To that end, either git checkout script is needed 
	   or maybe latex git package. 
	   Note that there may be documentation not created through latex 
	   and so git package may not be a generic solution. 
	 - include docs in jar.
	 - redesign: Target s are creational ones.
	   In mojos we also have creational ones and others.
	   The method AbstractLatexMojo.getTargetSet()
           is appropriate for creational targets only.
	   Maybe rename Target-{}->CreationalTarget,
	   and redesign: CreationalMojo.getTargetSet().
	 - There must be a mojo for phase validate or initialize
	   checking the most important things:
	 - Whether the converters mentioned are registered.
	   This refers to the commands to run and to the excluded converters.
	 - make it into maven central. Adapt manual accordingly. 
	   see https://maven.apache.org/repository/guide-central-repository-upload.html
	 - have a look at https://github.com/apache/maven-clean-plugin/ 
	   and adapt the own plugin: e.g. test harness. 
	 - https://maven.apache.org/plugins/maven-docck-plugin/
	 - The ant task cannot be created from source using ant alone, 
	   still maven is needed. 
	   One of the major problems is, that the class Settings 
	   depends on maven annotations. 
	 - bugfix: in ant task texPath cannot be used. 
	   The problem seems in Commandexecutor line 250 around: 
	   fig2dev is invoked as /home/ernst/...../fig2dev with complete path 
	   but in ant task only. 
	 - add latexmk to dependencies (because of cleaning)
	   converter is already known. 
	   TBD: add a category and maybe target clearwith latexmk, 
	   maybe also a parameter using latexmk. 
	   Also, files created by latexmk shall be cleared. 
	 - clean goal based on (categories of) coverters.
    -->

    <!-- TBD: rework on Converter.cmd2conv: 
	 Check also call hierarchy
	 also endow with appropriate failure handling  -->
    <!-- TBD: rework on ConverterCategories -->
    <!-- TBD: allow to exclude files from being processed, even graphic files. --> 
    <!-- TBD: bugfix: readTexSrcProcDirRec=false not respected. -->
    <!-- TBD: mention epsf like in my dissertation  -->
    <!-- TBD: Bugfix: superfluous comma in: 
	 WPP03: Skipped processing of files with suffixes [, .el]. -->

	 <!-- TBD: allow for more restrictions in versions of converters. 
		An application would be to ensure strict reproducibility 
		which requires certain diff tools but also certain versions of e.g. pdflatex. 
		Another application is that the version released by the author is not the one 
		available to the user. 
		Then (s)he should be able to use another version at own risk. 
		Another application is using pythontex which works together with latexmk only in later versions. 
		This is also a reason why also software not invoked directly could be vresion checked. 
		Other candidates could be vs code or emacs or octave or ocular. 
		To that end, expect a file named .versions.properties in the tex source directory overriding the default. 
		As info add the file versions are actually read from. 
		The rest is as now. -->

    <!-- partially still in 
	 https://www.simuline.eu/RepositoryMaven/
	 de/akquinet/jbosscc/latex/latex-maven-plugin/1.5-SNAPSHOT/ 
	 all with time stamp 2018-07-xx -->
    <release version="1.5-snapshot" 
	     date="2020-01-01" 
	     description="First release with change management 
			  This includes version of this software 
			  but also of the converters used.">
			 <action dev='reissner' type='add'>
				 Added check for reproducibility. 
				 This is a step towards a clean release management 
				 as this shall remove the dependency of this plugin to itself, 
				 potentially the same version. 
			 </action>
       <action dev="reissner" type="add">
	 Added VersionMojo to phase validate.
	 To that end, added configuration versionsWarnOnly
	 and convertersExcluded.
       </action>
       <action dev="reissner" type="add">
         Added validity checks on converters: registered, in correct category.
	 In the course of this, added a lot of exceptions:
	 TSS05, TSS06, TSS07 and TSS08
       </action>
       <action dev="reissner" type="add">
          Prepared for check in phase validate or initialize:
	  Added a way to exclude converters.
       </action>
       <action dev="reissner" type="add">
         Added rudimentary change management. 
       </action>
       <action dev="reissner" type="add">
         Added a readme.md file. 
       </action>
       <action dev="reissner" type="update">
         Converter gnuplot from gp to pdf changed version
		 and command line interface.
		 Likewise for inkscape, the converter from svn to pdf.
		 Added according manuals.
		 Updated converters again and again. 
       </action>
       <action dev="reissner" type="fix">
         Aligned licenses: eliminated contradictions:
		 License delivered is what is given top level on github. 
       </action>
       <action dev="reissner" type="add">
         Handling of versions: now in a separate resource file
		 for access from markdown, latex and java (the latter to come). 
		 Also updated several times
		 and proved for now that the format is useful.
		 Among the changes: 
       </action>
       <action dev="reissner" type="update">
         Updated a lot of versions in pom. 
       </action>
       <action dev="reissner" type="fix">
         Eliminated most of the javadoc failures. 
       </action>
       <action dev="reissner" type="add">
         Use maven enforcer plugin. 
       </action>
       <action dev="reissner" type="add">
         added docs for various packages. 
       </action>
       <action dev="reissner" type="add">
         added goal vrs displaying versions also of the converters 
         and whether they are valid. 
       </action>
       <action dev="reissner" type="add">
         added exception TSS04 checking validity of targets.
       </action>

       

       <!-- in manual fix underfull boxes and pdf version -->
       <!-- change name of plugin: latex-maven-plugin
	    This is not completed. Shall be set up both in folder structure 
	    and in github url given by pom.       -->
       <!-- further actions are given in the Readme.md -->
       <!-- TBD: include also hints in the manual. -->
       <!-- to offer standalone application: 
	    have a look at maven-jar-plugin documentation 
	    still commented out to make the jar executable. -->
       <!-- update to newer java version. e.g. define modules, packagedocs -->
       <!-- on site http://www.simuline.eu/LatexMavenPlugin 
	    set up a download area. 
	    Some of them are written by myself as xfig and dvi. 
	    For these the reference howpublished in lit.bib must be updated. 
       -->
       <!-- manual on dvi file format requires rework: 
	    no word about version and no word about dvitype program. 
	    Partially german english. -->
       <!-- test pandoc - -bibliography - -toc -s -R
	    s stands for standalone 
	    R stands for resolve, also try without 
	    and try to find a solution for indices and glossaries 
	    seemingly, currently not supported, anyway 
	    Try formulae with mathml and with mathjax 
	    What about tables, listings, figures?
       -->
       <!-- take texnische komoedie into account 
	    to evaluate the ways html export can be done -->
       <!-- latexml is interesting not only for html export 
	    but also for further analysis of tex files. 
	    Desirable: a SAX like interface. 
	    This could be interesting for all kinds of latex converters. -->
       <!-- test latexml
	    $ latexml -{}-dest beispiel.xml beispiel.tex
	    $ latexmlpost -{}-format=html4 -{}-mathimages -dest=bsp.html bsp.xml
       -->
       <!-- evaluate biblatex to replace bibtex. 
	    This also offers entry type @standard and rework bibliography -->
       <!-- support epub -->
       <!-- work through pdf: eine texnische kommödie --> 
       <!--  sources in package org.codehaus.plexus.util and subpackage 
       are given explicitly. 
       Maybe this shall be a dependency instead. 
       On the other hand, for standalone application, 
       this shall be included in the jar. 
       But if another version of these sources come on the classpath, 
       there is a version clash. 
       TBD: research how this can be avoided.  -->
       <!-- versions better in pom properties 
       than in separate file i feel. 
       But this would require improved maven-properties-plugin 
       so this kind of solution is deferred but shall be resumed asap.  -->
       <!-- TBD: update the site created by mvn site-deploy. 
	    There are even still parts referring to acquinet. -->
       <!-- TBD: the site docs is partially in apt 
	    which seems close to markdown. 
	    Maybe we can replace. 
	    What is needed is an evaluation of the formats: 
	    docbook, apt, xdoc, markdown. 
	    Partially apt seems superior to markdown. 
	    On the other hand, unification is necessary. 
	    Also important: does the site plugin support markdown? -->
       <!-- TBD: complete rework for ant users: 
	    starting from how to google and how to find sites. 
	    Are all references present? 
	    Does the software work properly? -->
       <!-- TBD: add this plugin to mavencentral 
	    This allows some simplification, also to documentation -->
       <!-- TBD: collect Todos given in manual -->
       <!-- TBD: eliminate underfull \vbox es in manual -->
       <!-- TBD: eliminate warning: pdflatex found version 1.7 
	    allowed 1.5 only -->
       <!-- TBD: goal vrs can give more than versioning info, 
	    as e.g. vendor and things like that. -->
       <!-- TBD: vrs may be tied to lifecycle phase 
	    validate or better pre-site. 
	    but then it must be possible to choose the converters active. -->
       <!-- TBD: if the active converters are configurable, 
	    then one has to ensure that only the configured are used. -->
       <!-- TBD: fill in the gap given by tool makeindex: 
	    does not allow to get its version without breaking it 
	    or applying it on a file. 
	    Maybe the solution is to replace it by upmendex -->
       <!-- TBD: goal latex:vrs 
	    shall work even if not all converters are installed. 
	    Problem: MetaInfo.Version constructor: 
	    executor then throws BuildFailureException -->
       <!-- TBD: maybe vrs shall be included in phase validate. -->
       <!-- TBD: ant-task: somehow synchronize coordinates with pom: 
	    name, version -->

       <!-- setting readTexSrcProcDirRec seems to refer to processing graphics only. 
	    Check whether this is appropriate. -->
       <!-- TBD: rework on Converter.java: diff-pdf has pseudo version only. -->
       <!-- TBD: Converter.java: there is an unspecific ConverterCategory: eliminate. -->
       
			 <!-- TBD: reproducible runs: take other output formats into account also: 
				at least html. -->
     </release>


     
     <!-- Here starts version 1.4 -->
     <!-- Re-hosted in 
	  https://www.simuline.eu/RepositoryMaven/
	  de/akquinet/jbosscc/latex/latex-maven-plugin/ -->
     <release version="1.4" 
	     date="2018-06-19" 
	     description="TBD">
      <action dev="reissner" type="add">
        added goal help
       </action>
      <action dev="reissner" type="update">
        email address: ernst.reissner@simuline.eu,
	site org.m2latex --> eu.simuline.m2latex also repo
       </action>
      </release>

     <!-- 1.3 does not exist!!! -->
     <!-- Re-hosted in 
	  https://www.simuline.eu/RepositoryMaven/
	  de/akquinet/jbosscc/latex/latex-maven-plugin/ -->
      <release version="1.3" 
	      date="2016-09-09" 
	      description="Renamed plugin">
       <action dev="reissner" type="update">
         Renamed plugin due to new convention into latex-maven-plugin
	 and changed version. (without release plugin)
	 CAUTION: Thus no snapshot release was created
	 and so there is more than one checkin with a release version,
	 i.e. no snapshot. 
       </action>
       <action dev="reissner" type="update">
         Updated java version to 1.5,
	 replaced javadoc tags by annotations,
	 updated junit to 4.12,
	 replaced easymock by mockito,
	 updated all to eu.simuline.m2latex
       </action>
       <action dev="reissner" type="add">
	 Made rerun mechanism configurable:
	 added parameter patternNeedAnotherLatexRun
	 containing a pattern to regocnize need to rerun from log file
	 and added parameter maxNumReruns signifying a maximum number of reruns.
       </action>
       <action dev="reissner" type="add">
	 added parameter tex4htOutputDirectory
       </action>
       <action dev="reissner" type="add">
	 added conversion to rtf via latex2rtf and parameter latex2rtfCommand
       </action>
       <action dev="reissner" type="add">
	 added conversion to odt and docx also via htlatex and dot2doc
	 adding parameter odt2docCommand
       </action>
      <action dev="reissner" type="add">
	added conversion of document to dvi and ps and
	conversion of graphic to eps besides pdf 
       </action>
       <action dev="reissner" type="add">
	 added conversion to txt via pdftotext with parameter pdf2txtCommand
       </action>
       <action dev="reissner" type="add">
	 added support for makeindes along the same lines as bibtex
	 also multiple indices and split ones.
	 added glossaries 
	 adding parameters makeIndexCommand
       </action>
       <action dev="reissner" type="add">
	 now in one run conversion in many formats can be done
	 and made configurable through the parameter targets.
	 There are goals to create a specified output format
	 e.g running mvn latex:pdf
	 or all formats configured by mvn latex:cfg
       </action>
       <action dev="reissner" type="add">
	 added detection of failures and warnings for latex, htlatex
	 auxiliary programs like bibtex.
	 In particular added parameters patternErrLatex,
	 patternErrMakeindex

	 Made display of warnings and box-warnings over/underfull configurable
	 adding parameters debugWarnings and debugBadBoxes
	 Detected errors and warnings on conversions 
	 due to monitoring of files to be created.
	 TBD: just mere existence, but could be also modification time.

	 Added warnings on files skipped. 
       </action>
        <action dev="reissner" type="add">
	 added handling of toc, listoffigures, listoftables, listoflistings 
       </action>
       
       <action dev="reissner" type="add">
	 added support for new graphic formats fig, gnuplot, jpg, png, svg 
	 with parameters fig2devCommand, 
       </action>
      <action dev="reissner" type="add">
	 added selection of latex documents from all files with ending .tex
       </action>
       <action dev="reissner" type="add">
	 added javadoc plugin 
       </action>
      <action dev="reissner" type="add">
	added ant tasks besides the maven plugin
	dividing the software in mojos defining a mavan plugin,
	ant tasks and core classes in separate packages. 
       </action>
     <action dev="reissner" type="add">
       added a manual written in tex and to be compiled
       by this plugin and by ant task defined  here. 
       </action>
     <action dev="reissner" type="add">
       added documentation of latex pacakges, tools,
       and file formats including self written ones on fig and dvi. 
       </action>
    <action dev="reissner" type="add">
       processing in source directories
       which is considered the working directory
       and move of results into target directory.
       Also clean goal and task to restore the source directory.
       This eases development of latex files considerably
       because one can invoke the needed tools directly
       without using this plugin/task.
       Also one can use forward/backward search between editor and viewer.
       But the viewer has to be in the source directory then.
       Nevertheless cleaning up works. 
       </action>
    <action dev="reissner" type="add">
      added goal/task clear.
      Added goals grp (graphics) and chk (check)
       </action>

     </release>

     
     <!-- jars not in https://www.simuline.eu/RepositoryMaven/ but still in 
	  https://repo.maven.apache.org/maven2/
	  de/akquinet/jbosscc/latex/maven-latex-plugin/ -->
     <!-- Sources in https://github.com/akquinet/maven-latex-plugin -->
     <release version="1.2" 
	     date="2012-02-07" 
	     description="TBD">
     </release>

    <!-- TBD: added older changes -->
  </body>
</document>
